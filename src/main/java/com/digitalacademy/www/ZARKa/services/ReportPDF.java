package com.digitalacademy.www.ZARKa.services;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class ReportPDF {
	
	
	private static String FILE = "/Users/academy_intern/Downloads/realBackEnd/ZARKa/src/main/resources/reports/report.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font altFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.GREEN.darker());
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
    private static Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
    private static Document document = new Document();
 
   
    public static Document getDocument() {
		return document;
    }
    
	public static void setDocument(Document document) {
		ReportPDF.document = document;
	}

	public static String getFILE() {
		return FILE;
	}
    
	public static Font getCatFont() {
		return catFont;
	}
	
	public static Font getAltFont() {
		return altFont;
	}

	public static Font getNormalFont() {
		return normalFont;
	}
	
	public static Font getRedFont() {
		return redFont;
	}

	public static Font getSubFont() {
		return subFont;
	}

	public static Font getSmallBold() {
		return smallBold;
	}
	

	public static void initiatePDf()
    {
    	 try {
    	
    	        PdfWriter.getInstance(getDocument(), new FileOutputStream(FILE));
    	        getDocument().open();
    	        
    	        addMetaData(getDocument());
    	        addTitlePage(getDocument());
    	       
    	    } catch (Exception e) {
    	        e.printStackTrace();
    	    }
    	    
    }
	
	public static void writePDF(String reportText) throws DocumentException
	{
		addContent(document, reportText, getAltFont());
	}
   
	public static void closeDocument() throws DocumentException
	{
		Paragraph preface = new Paragraph();
	
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("                               Report generated by: " + " Zarka "+ ", " + new Date(), smallBold));
		 
		document.add(preface);
		document.close();
	}

  	public static void addMetaData(Document document) {
          
  		  document.addTitle("ZARka weekly currency report");
          document.addSubject("Weekly Report");
          document.addAuthor("Zarka");
          document.addCreator("Zarka Team");
      }
  	
  	public static void addTitlePage(Document document) throws DocumentException {
  		
  			Paragraph preface = new Paragraph();
  			
  	        //add one empty line
  	        addEmptyLine(preface, 1);
  	        
  	        // Lets write a big header
  	        preface.add(new Paragraph("                                   ZARka Weekly Reports", catFont));
  	        addEmptyLine(preface, 1);
  	        
  	        document.add(preface);
  	        
  	        //document.newPage();  // Start a new page: Puts following content on a new page.
  	}
  	
  	
  	public static void addSubtitle(Document document, String reportText) throws DocumentException {
  	
  		Paragraph preface = new Paragraph();
  		
  		preface.add(new Paragraph(reportText, smallBold));
  		addEmptyLine(preface, 0);
  		
        document.add(preface);
  	}
  	
	public static void addContent(Document document, String reportText, Font font) throws DocumentException {
  		
		Paragraph preface = new Paragraph();
		
        preface.add(new Paragraph(reportText, font));
        document.add(preface);
		
	}
  	
  	public static void addEmptyLine(Paragraph paragraph, int number) {
          for (int i = 0; i < number; i++) {
              paragraph.add(new Paragraph(" "));
          }
    }
  	
  	public static boolean deleteDocument(String path)
  	{
  		File file = new File(path);
  		
  		return file.delete();
  	}
  
}
